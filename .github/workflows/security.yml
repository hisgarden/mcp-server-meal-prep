name: Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install security tools
        run: |
          cargo install cargo-audit cargo-deny cargo-auditable

      - name: Update audit database
        run: cargo audit update

      - name: Run cargo audit
        run: cargo audit --deny warnings

      - name: Run cargo deny
        run: cargo deny check

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check for outdated dependencies
        run: |
          cargo install cargo-outdated
          cargo outdated --exit-code 1

      - name: Check for duplicate dependencies
        run: |
          cargo install cargo-duplicates
          cargo duplicates

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check code formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check for unsafe code
        run: |
          if grep -r "unsafe" src/ --include="*.rs"; then
            echo "::warning::Unsafe code blocks found"
          else
            echo "No unsafe code blocks found"
          fi

  build-security:
    name: Security Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build security profile
        run: cargo build --profile security

      - name: Check binary security
        run: |
          file target/security/mcp-server-meal-prep
          ls -la target/security/mcp-server-meal-prep
          shasum -a 256 target/security/mcp-server-meal-prep

  test-security:
    name: Security Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run security tests
        run: |
          chmod +x scripts/security-check.sh
          ./scripts/security-check.sh

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install security tools
        run: cargo install cargo-auditable

      - name: Generate SBOM
        run: |
          chmod +x scripts/generate-sbom.sh
          ./scripts/generate-sbom.sh

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-files
          path: sbom/

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, code-quality, build-security, test-security, sbom-generation]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "üîí Security Pipeline Summary"
          echo "============================"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build Security: ${{ needs.build-security.result }}"
          echo "Test Security: ${{ needs.test-security.result }}"
          echo "SBOM Generation: ${{ needs.sbom-generation.result }}"
          
          if [[ "${{ needs.security-audit.result }}" == "success" && 
                "${{ needs.dependency-check.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.build-security.result }}" == "success" && 
                "${{ needs.test-security.result }}" == "success" && 
                "${{ needs.sbom-generation.result }}" == "success" ]]; then
            echo "‚úÖ All security checks passed!"
            exit 0
          else
            echo "‚ùå Some security checks failed!"
            exit 1
          fi
